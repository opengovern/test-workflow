# .github/workflows/test-package.yml

name: Test Package Deployment

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  test-deployment:
    runs-on: ubuntu-latest

    env:
      LINODE_CLI_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      MAX_TIME_SECONDS: 300 # 5 minutes in seconds
      CLUSTER_LABEL: "test-cluster-${{ github.run_id }}"
      VOLUME_TAG: "ecomm-${{ github.run_id }}" # Unique tag to identify volumes

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Linode CLI
        run: |
          pip install linode-cli

      # Linode CLI will use the LINODE_CLI_TOKEN environment variable

      - name: Create Kubernetes Cluster
        id: create_cluster
        run: |
          cluster_create_output=$(linode-cli lke cluster-create \
            --label $CLUSTER_LABEL \
            --region us-central \
            --k8s_version 1.31 \
            --control_plane.high_availability false \
            --node_pools.type g6-dedicated-4 \
            --node_pools.count 3 \
            --node_pools.autoscaler.enabled false \
            --tags $VOLUME_TAG \
            --format id \
            --text)
          echo "Cluster creation output: $cluster_create_output"
          CLUSTER_ID=$(echo $cluster_create_output | awk '{print $2}')
          echo "Cluster ID: $CLUSTER_ID"
          echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_OUTPUT
        env:
          CLUSTER_LABEL: ${{ env.CLUSTER_LABEL }}
          VOLUME_TAG: ${{ env.VOLUME_TAG }}
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}

      - name: Wait for Cluster to be Ready
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          INITIAL_WAIT=120 # Wait for 2 minutes before starting checks
          MAX_RETRIES=10
          SLEEP_INTERVAL=30
          SUCCESS=false

          echo "Waiting for initial $INITIAL_WAIT seconds to allow cluster to initialize..."
          sleep $INITIAL_WAIT

          for ((i=1;i<=MAX_RETRIES;i++)); do
            echo "Attempt $i: Checking API endpoints..."

            set +e
            endpoints=$(linode-cli lke api-endpoints-list $CLUSTER_ID --format endpoint --text 2>/dev/null)
            exit_status=$?
            set -e

            if [ $exit_status -ne 0 ]; then
              echo "Failed to retrieve API endpoints (exit status $exit_status). Cluster API Endpoints are not yet available."
              all_available=false
            else
              if [ -z "$endpoints" ]; then
                echo "No endpoints returned. Waiting for endpoints to be populated."
                all_available=false
              else
                all_available=true
                while read -r endpoint; do
                  if ! curl -sk --head --request GET "$endpoint" | grep "200 OK" > /dev/null; then
                    echo "Endpoint $endpoint is not available yet."
                    all_available=false
                    break
                  else
                    echo "Endpoint $endpoint is available."
                  fi
                done <<< "$endpoints"
              fi
            fi

            if [ "$all_available" = true ]; then
              echo "All API endpoints are available. Cluster is ready."
              SUCCESS=true
              break
            fi

            echo "Not all API endpoints are available yet. Waiting for $SLEEP_INTERVAL seconds before retrying..."
            sleep $SLEEP_INTERVAL
          done

          if [ "$SUCCESS" = false ]; then
            echo "Cluster did not become ready within expected time."
            exit 1
          fi
        env:
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}

      - name: Retrieve Kubeconfig with Retry
        id: retrieve_kubeconfig
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          echo "Attempting to retrieve kubeconfig for cluster ID $CLUSTER_ID..."
          MAX_RETRIES=5
          SLEEP_INTERVAL=60
          SUCCESS=false

          for ((i=1;i<=MAX_RETRIES;i++)); do
            echo "Attempt $i: Retrieving kubeconfig..."
            linode-cli lke kubeconfig-view $CLUSTER_ID > $KUBECONFIG && {
              echo "Kubeconfig retrieved successfully."
              SUCCESS=true
              break
            } || {
              echo "Kubeconfig not ready yet."
            }

            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to retrieve kubeconfig within expected time."
              exit 1
            fi

            echo "Waiting for $SLEEP_INTERVAL seconds before retrying..."
            sleep $SLEEP_INTERVAL
          done

          if [ "$SUCCESS" = true ]; then
            echo "Kubeconfig retrieval succeeded."
          fi

          echo "SUCCESS=$SUCCESS" >> $GITHUB_OUTPUT
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Verify kubectl Configuration
        run: kubectl get nodes
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.3'

      - name: Add OpenComply Helm Repository
        run: helm repo add opencomply https://charts.opencomply.io

      - name: Update Helm Repositories
        run: helm repo update

      - name: Install OpenComply
        run: |
          helm install opencomply opencomply/opencomply \
            --create-namespace \
            --namespace opencomply \
            --timeout 10m
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Wait for Pods to be Ready and Jobs to Complete
        id: wait_for_ready
        run: |
          start_time=$(date +%s)
          namespace="opencomply"
          timeout=$MAX_TIME_SECONDS

          echo "Waiting for all pods to be ready and jobs to complete in namespace '$namespace'..."

          while true; do
            current_time=$(date +%s)
            elapsed_time=$(( current_time - start_time ))

            if [ $elapsed_time -gt $timeout ]; then
              echo "Timeout reached ($timeout seconds). Pods and jobs did not become ready in time."
              exit 1
            fi

            # Check if all pods are ready
            not_ready_pods=$(kubectl get pods -n $namespace --field-selector=status.phase!=Running --no-headers | wc -l)
            pending_pods=$(kubectl get pods -n $namespace --field-selector=status.phase=Pending --no-headers | wc -l)
            crashloop_pods=$(kubectl get pods -n $namespace | grep CrashLoopBackOff | wc -l)

            # Check if all jobs are completed
            incomplete_jobs=$(kubectl get jobs -n $namespace --no-headers | awk '{if ($3 != $2 || $2 == 0) print $1}' | wc -l)

            if [ $not_ready_pods -eq 0 ] && [ $pending_pods -eq 0 ] && [ $crashloop_pods -eq 0 ] && [ $incomplete_jobs -eq 0 ]; then
              echo "All pods are running and all jobs are completed."
              break
            else
              echo "Pods not ready: $not_ready_pods, Pending pods: $pending_pods, CrashLoopBackOff pods: $crashloop_pods, Incomplete jobs: $incomplete_jobs"
              echo "Elapsed time: $elapsed_time seconds"
              sleep 10
            fi
          done

          total_time=$(( current_time - start_time ))
          echo "total_time=$total_time" >> $GITHUB_OUTPUT
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Output Total Time
        run: |
          echo "Deployment completed in ${{ steps.wait_for_ready.outputs.total_time }} seconds."
          if [ ${{ steps.wait_for_ready.outputs.total_time }} -gt $MAX_TIME_SECONDS ]; then
            echo "Deployment took longer than expected."
            exit 1
          fi

      - name: Identify PVC Volumes
        id: identify_pvcs
        run: |
          # List all PersistentVolumeClaims in the cluster and extract associated PersistentVolumes
          pvcs=$(kubectl get pvc --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}/{.metadata.name}:{.spec.volumeName}{"\n"}{end}')

          # Extract unique PersistentVolumes
          pvs=$(echo "$pvcs" | awk -F':' '{print $2}' | sort | uniq)

          echo "PVCs and their PersistentVolumes:"
          echo "$pvcs"

          # Store PV IDs for deletion
          echo "PVS=$pvs" >> $GITHUB_OUTPUT
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Delete Kubernetes Cluster
        if: steps.create_cluster.outcome == 'success'
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          echo "Deleting cluster ID $CLUSTER_ID..."
          linode-cli lke cluster-delete $CLUSTER_ID
        env:
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}

      - name: Wait for Cluster Deletion
        if: steps.create_cluster.outcome == 'success'
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          echo "Waiting for cluster ID $CLUSTER_ID to be deleted..."
          MAX_RETRIES=5
          SLEEP_INTERVAL=60
          SUCCESS=false

          for ((i=1;i<=MAX_RETRIES;i++)); do
            echo "Attempt $i: Checking cluster status..."
            status=$(linode-cli lke cluster-view $CLUSTER_ID --format status --text 2>/dev/null || echo "deleted")
            echo "Cluster status: $status"
            if [ "$status" == "deleted" ]; then
              echo "Cluster has been deleted."
              SUCCESS=true
              break
            fi
            echo "Cluster is still deleting. Waiting for $SLEEP_INTERVAL seconds before retrying..."
            sleep $SLEEP_INTERVAL
          done

          if [ "$SUCCESS" = false ]; then
            echo "Cluster was not deleted in time."
            exit 1
          fi
        env:
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}

      - name: Delete PVC Volumes
        if: steps.create_cluster.outcome == 'success'
        run: |
          pvs=${{ steps.identify_pvcs.outputs.PVS }}
          if [ -z "$pvs" ]; then
            echo "No PersistentVolumes to delete."
            exit 0
          fi

          echo "Deleting PersistentVolumes:"
          for pv in $pvs; do
            echo "Deleting PersistentVolume: $pv"
            kubectl delete pv $pv
          done
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Delete Linode Volumes
        if: steps.create_cluster.outcome == 'success' && steps.identify_pvcs.outputs.PVS != ''
        run: |
          # List all Linode volumes tagged with VOLUME_TAG
          volumes=$(linode-cli volume list --tag $VOLUME_TAG --format id --text)
          if [ -z "$volumes" ]; then
            echo "No Linode volumes to delete."
            exit 0
          fi

          echo "Deleting Linode Volumes:"
          for volume_id in $volumes; do
            echo "Deleting volume ID: $volume_id"
            linode-cli volume delete $volume_id --yes
          done
        env:
          LINODE_CLI_TOKEN: ${{ env.LINODE_CLI_TOKEN }}
          VOLUME_TAG: ${{ env.VOLUME_TAG }}
