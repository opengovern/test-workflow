# .github/workflows/test-package.yml

name: Test Package Deployment

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  test-deployment:
    runs-on: ubuntu-latest

    env:
      LINODE_API_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      MAX_TIME_SECONDS: 300 # 5 minutes in seconds
      CLUSTER_LABEL: "test-cluster-${{ github.run_id }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Linode CLI
        run: |
          pip install linode-cli

      - name: Configure Linode CLI
        run: |
          linode-cli configure --token $LINODE_API_TOKEN --label "github-actions" --json
        env:
          LINODE_API_TOKEN: ${{ secrets.LINODE_API_TOKEN }}

      - name: Create Kubernetes Cluster
        id: create_cluster
        run: |
          cluster_create_output=$(linode-cli lke cluster-create \
            --label $CLUSTER_LABEL \
            --region us-east \
            --k8s_version 1.28 \
            --node_pools.type g6-standard-4 \
            --node_pools.count 3 \
            --tags github-actions \
            --format id \
            --text)
          echo "Cluster creation output: $cluster_create_output"
          export CLUSTER_ID=$(echo $cluster_create_output | awk '{print $2}')
          echo "Cluster ID: $CLUSTER_ID"
          echo "::set-output name=CLUSTER_ID::$CLUSTER_ID"
        env:
          CLUSTER_LABEL: ${{ env.CLUSTER_LABEL }}

      - name: Wait for Cluster to be Ready
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          echo "Waiting for cluster ID $CLUSTER_ID to be ready..."
          for i in {1..30}; do
            status=$(linode-cli lke cluster-view $CLUSTER_ID --format status --text | tail -n1)
            echo "Cluster status: $status"
            if [ "$status" == "ready" ]; then
              echo "Cluster is ready."
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Cluster did not become ready in time."
              exit 1
            fi
            sleep 10
          done

      - name: Retrieve Kubeconfig
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          linode-cli lke kubeconfig-view $CLUSTER_ID > $KUBECONFIG
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Verify kubectl Configuration
        run: kubectl get nodes
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.3'

      - name: Add OpenComply Helm Repository
        run: helm repo add opencomply https://charts.opencomply.io

      - name: Update Helm Repositories
        run: helm repo update

      - name: Install OpenComply
        run: |
          helm install opencomply opencomply/opencomply \
            --create-namespace \
            --namespace opencomply \
            --timeout 10m
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Wait for Pods to be Ready and Jobs to Complete
        id: wait_for_ready
        run: |
          start_time=$(date +%s)
          namespace="opencomply"
          timeout=$MAX_TIME_SECONDS

          echo "Waiting for all pods to be ready and jobs to complete in namespace '$namespace'..."

          while true; do
            current_time=$(date +%s)
            elapsed_time=$(( current_time - start_time ))

            if [ $elapsed_time -gt $timeout ]; then
              echo "Timeout reached ($timeout seconds). Pods and jobs did not become ready in time."
              exit 1
            fi

            # Check if all pods are ready
            not_ready_pods=$(kubectl get pods -n $namespace --field-selector=status.phase!=Running --no-headers | wc -l)
            pending_pods=$(kubectl get pods -n $namespace --field-selector=status.phase=Pending --no-headers | wc -l)
            crashloop_pods=$(kubectl get pods -n $namespace | grep CrashLoopBackOff | wc -l)

            # Check if all jobs are completed
            incomplete_jobs=$(kubectl get jobs -n $namespace --no-headers | awk '{if ($3 != $2 || $2 == 0) print $1}' | wc -l)

            if [ $not_ready_pods -eq 0 ] && [ $pending_pods -eq 0 ] && [ $crashloop_pods -eq 0 ] && [ $incomplete_jobs -eq 0 ]; then
              echo "All pods are running and all jobs are completed."
              break
            else
              echo "Pods not ready: $not_ready_pods, Pending pods: $pending_pods, CrashLoopBackOff pods: $crashloop_pods, Incomplete jobs: $incomplete_jobs"
              echo "Elapsed time: $elapsed_time seconds"
              sleep 10
            fi
          done

          total_time=$(( current_time - start_time ))
          echo "::set-output name=total_time::$total_time"
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Output Total Time
        run: |
          echo "Deployment completed in ${{ steps.wait_for_ready.outputs.total_time }} seconds."
          if [ ${{ steps.wait_for_ready.outputs.total_time }} -gt $MAX_TIME_SECONDS ]; then
            echo "Deployment took longer than expected."
            exit 1
          fi

      - name: Delete Kubernetes Cluster
        if: always()
        run: |
          CLUSTER_ID=${{ steps.create_cluster.outputs.CLUSTER_ID }}
          echo "Deleting cluster ID $CLUSTER_ID..."
          linode-cli lke cluster-delete $CLUSTER_ID
